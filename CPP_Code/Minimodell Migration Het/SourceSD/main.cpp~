#include <iostream>      
#include <cstdlib>
#include <ctime>
#include "species.h"
#include "foodweb.h"
#include "controller.h"
#include "output.h"
#include <sys/stat.h>

using namespace std;



int main(int argc, char** argv)
{
  if(argc != 12)
  {
    cout << "Falsche Parameteranzahl! Aufruf mit:" << endl << "./working ausgabeordner seed x c d col row prop frM frV runtime" << endl;
    return 0;
  }
  char* path = argv[1];
  int seed = atoi(argv[2]);
  double x = atof(argv[3])/1e6;
  double c = atof(argv[4])/1e6;
  double d = atof(argv[5])/1e6;
  int columns = atoi(argv[6]);
  int rows = atoi(argv[7]);
  double migration_proportion = atoi(argv[8])/1e3;
  double feedingrange_min = atoi(argv[9])/1e3;
  double feedingrange_var = atoi(argv[10])/1e3;
  long long runtime = atoll(argv[11]);
  
  const int scenario = 2*3*5*7;
  
  time_t start_time = clock();
  time_t timer = clock();
  cout << endl;
  cout << "=========================================================" << endl;
  cout << "Programmstart mit Parametern:" << endl;
  cout << "path = " << path << endl;
  cout << "seed = " << seed << endl;
  cout << "x = " << x << " | c = " << c << " | d = " << d << endl;
  cout << "col = " << columns << " | row = " << rows << endl;
  cout << "prop = " << migration_proportion << endl;
  cout << "frM = " << feedingrange_min << endl;
  cout << "frV = " << feedingrange_var << endl;
  cout << "runtime = " << runtime << endl;
  
  Output* out = new Output();
  
  const int dir_err = mkdir(path, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
  if(-1 == dir_err)
    cout << "Error creating directory!" << endl;
    
  
  out->open_files(path);
  
  
  //out->mute(Output::OUT_DIE);
  out->mute(Output::OUT_PAR);
  out->mute(Output::OUT_S);
  out->mute(Output::OUT_TROPHDISTRI);
  out->mute(Output::OUT_C);
  out->mute(Output::OUT_ALPHA);
  out->mute(Output::OUT_BM);
  out->mute(Output::OUT_TROPOS);
  
  
  Controller* ctrl = new Controller();
  ctrl->init(seed, columns, rows, migration_proportion, feedingrange_min, feedingrange_var);
  ctrl->set_x(x);
  ctrl->set_c(c);
  ctrl->set_d(d);
  
  
     
  while(ctrl->get_t() < runtime)
  {
    
    if(ctrl->migration_or_mutation())	//hier wird target_web_id gesetzt. Sollte keine migration möglich sein, so
    {					//ist target_web_id = -1 !
    while(ctrl->die(out)) continue;
    ctrl->print(out);

      if((double)(clock()-timer)/CLOCKS_PER_SEC > 60.0)
      {
	if((double)(clock()-start_time)/CLOCKS_PER_SEC < 3660.0)
	{
	  timer = clock();
	  cout << "t = " << ctrl->get_t() << " (" << (double)(clock()-start_time)/CLOCKS_PER_SEC << " s)" << endl;
	}
	else if((double)(clock()-timer)/CLOCKS_PER_SEC > 1800.0)
	{
	  timer = clock();
	  cout << "t = " << ctrl->get_t() << " (" << ((double)(clock()-start_time)/CLOCKS_PER_SEC)/3600.0 << " h)" << endl;
	}
      }
    }
  }
  
  int success_migration = ctrl->get_success_migration(); 
  int success_mutation = ctrl->get_success_mutation(); 
  int success = success_migration + success_mutation;
  int all_webs = ctrl->get_counter_all_webs();
  int inbound = ctrl->get_counter_inbound();
  
  ctrl->clean_up(out);
  
  delete ctrl;
  
  
  //out->write_params(path, scenario, seed, x, c, d);		//gesammelte Daten über mehrere Läufe
  out->close_files();
  
  cout << "Programmende! Laufzeit: " << (double)(clock()-start_time)/CLOCKS_PER_SEC << " s" << endl;
  cout << endl;
  cout << "Es gab " << success_migration << " erfolgreiche Migrationen (" << 100*(double)success_migration/runtime << "%)" << endl;
  cout << "und " << success_mutation << " erfolgreiche Mutationen (" << 100*(double)success_mutation/runtime << "%)." << endl;
  cout << "Damit wurde effektiv in " << 100*(double)success_migration/(success_mutation+success_migration) << "% der Fälle migriert," << endl;
  cout << "im Vergleich zu den gegebenen " << 100*migration_proportion/(1+migration_proportion) << "%." << endl;
  cout << endl;
  cout << "Die Migration scheiterte in " << inbound << " (" << 100*(double)inbound/runtime*(1+migration_proportion)/migration_proportion << "%) Fällen, weil nach innen migriert wurde." << endl;
  cout << "Davon waren " << all_webs << " (" << 100*(double)all_webs/inbound << "%) Migrationen von Spezies, die auf allen Patches existiert haben." << endl;
  cout << "Insgesamt gab es " << success << " erfolgreiche Veränderungen." << endl;
  cout << "Damit lag die Erfolgsrate bei " << 100*(double)success/runtime << "%." << endl;
  cout << "=========================================================" << endl;
  cout << endl;
  
  delete out;
  
  return 0;                                        
}
